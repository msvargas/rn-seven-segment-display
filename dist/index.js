import React from "react";
import { View, Platform } from "react-native";
import HSegment from "./HSegment";
import VSegment from "./VSegment";
/**
  * References: http://www.uize.com/examples/seven-segment-display.html
 * Example: 0 = 0x3f
 *  G	F	E	D	C	B	A
    0	1	1	1	1	1	1
 */
export var bitReadAll = function (value) {
    return [6, 5, 4, 3, 2, 1, 0].map(function (bit) { return Boolean((value >> bit) & 0x01); });
};
export var segmentMap = {
    "0": bitReadAll(0x3f),
    "1": bitReadAll(0x06),
    "2": bitReadAll(0x5b),
    "3": bitReadAll(0x4f),
    "4": bitReadAll(0x66),
    "5": bitReadAll(0x6d),
    "6": bitReadAll(0x7d),
    "7": bitReadAll(0x07),
    "8": bitReadAll(0x7f),
    "9": bitReadAll(0x6f),
    A: bitReadAll(0x77),
    //B : , // not support
    C: bitReadAll(0x39),
    // D : , //not support
    E: bitReadAll(0x79),
    F: bitReadAll(0x71),
    G: bitReadAll(0x3d),
    H: bitReadAll(0x76),
    //I: ,//not support
    J: bitReadAll(0x1e),
    //K: , // not support
    L: bitReadAll(0x0e),
    //M: , // not support
    N: bitReadAll(0x37),
    // O: , //not support
    P: bitReadAll(0x73),
    //Q: , //not support
    //R: ,//not support
    // S: ,//not support
    //T: ,//not support
    U: bitReadAll(0x3e),
    Y: bitReadAll(0x6e),
    a: bitReadAll(0x5f),
    b: bitReadAll(0x7c),
    c: bitReadAll(0x58),
    d: bitReadAll(0x5e),
    e: bitReadAll(0x7b),
    h: bitReadAll(0x74),
    i: bitReadAll(0x10),
    j: bitReadAll(0x0e),
    l: bitReadAll(0x06),
    n: bitReadAll(0x15),
    o: bitReadAll(0x5c),
    q: bitReadAll(0x67),
    r: bitReadAll(0x50),
    t: bitReadAll(0x78),
    u: bitReadAll(0x1c),
    "-": bitReadAll(0x40),
    _: bitReadAll(0x08),
    "=": bitReadAll(0x48)
};
var defaultProps = {
    width: Platform.OS === "web" ? 40 : 20,
    height: Platform.OS === "web" ? 8 : 5,
    value: "-",
    onColor: "#3ADF00",
    offColor: "rgba(0,255,0,0.1)"
};
export default function SevenSegmentDisplay(_a) {
    var _b = _a === void 0 ? defaultProps : _a, _c = _b.width, width = _c === void 0 ? defaultProps.width : _c, _d = _b.height, height = _d === void 0 ? defaultProps.height : _d, _e = _b.onColor, onColor = _e === void 0 ? defaultProps.onColor : _e, _f = _b.offColor, offColor = _f === void 0 ? defaultProps.offColor : _f, value = _b.value, style = _b.style;
    width = +width;
    height = +height;
    var _g = value in segmentMap ? segmentMap[value] : bitReadAll(Number(value)), g = _g[0], f = _g[1], e = _g[2], d = _g[3], c = _g[4], b = _g[5], a = _g[6];
    return (<View style={[{ width: width + height * 2, margin: 4 }, style]}>
      <HSegment width={width} height={height} color={a ? onColor : offColor}/>
      <View style={{ position: "relative", width: "100%", height: width }}>
        <VSegment width={height} height={width} color={f ? onColor : offColor} align="left"/>
        <VSegment width={height} height={width} color={b ? onColor : offColor} align="right"/>
      </View>
      <HSegment width={width} height={height} color={g ? onColor : offColor}/>
      <View style={{ position: "relative", width: "100%", height: width }}>
        <VSegment width={height} height={width} color={e ? onColor : offColor} align="left"/>
        <VSegment width={height} height={width} color={c ? onColor : offColor} align="right"/>
      </View>
      <HSegment width={width} height={height} color={d ? onColor : offColor}/>
    </View>);
}
SevenSegmentDisplay.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;base64,